{
    "collab_server" : "",
    "contents" : "#' Check footnote typography\n#' @param filename A LaTeX file.\n#' @param ignore.lines Lines to ignore (for example, those using the word 'footnote').\n#' @param .report_error A function to provide context to any errors.\n#' @return Called for its side-effect.\n#' @details This function when applied to a LaTeX file will throw an error if: (1) footnotes\n#' @export\n\ncheck_footnote_typography <- function(filename, ignore.lines = NULL, .report_error){\n  \n  if (missing(.report_error)){\n    .report_error <- function(...) report2console(...)\n  }\n  \n  lines <- read_lines(filename)\n  if (!is.null(ignore.lines)){\n    lines <- lines[-ignore.lines]\n  }\n\n  # Remove commentaries (but not the comment symbol)\n  # Need to include percentage signs though\n\n  lines <- gsub(\"((?<!(\\\\\\\\))%).*$\", \"%\", lines, perl = TRUE)\n  \n  # Check overview for footnotes\n  overview_start <- lines == \"\\\\begin{overview}\"\n  overview_end <- lines == \"\\\\end{overview}\"\n  if (any(overview_start)){\n    is_overview <- as.logical(cumsum(overview_start) - cumsum(overview_end))\n    if (any(grepl(\"\\\\footnote\", lines[is_overview], fixed = TRUE))){\n      if (!any(overview_end)){\n        stop(\"Emergency stop: No \\\\end{overview} found in document. Check your LaTeX syntax and try again\")\n      } else {\n        line_no <- grep(\"\\\\footnote\", lines[is_overview], fixed = TRUE)\n        .report_error(line_no = line_no,\n                      context = lines[line_no], \n                      error_message = \"Footnote detected in overview.\")\n        stop(\"Footnote detected in overview. Remove any footnotes in the overview.\")\n      }\n    }\n  }\n\n  # To avoid footnotesize\n  lines <- gsub(\"footnotesize\", \"FOOTNOTESIZE\", lines, fixed = TRUE)\n  lines <- lines[!grepl(\"GenericWarning\", lines, fixed = TRUE)]\n  # Don't try to parse the word 'footnote' outside a control sequence.\n  # 'Sentence containing word footnote' and '\\\\footnotemark' shouldn't be detected.\n  lines <- gsub(\"([^\\\\\\\\])footnote\", \"\\\\1fnote\", lines)\n  lines <- gsub(\"\\\\\\\\footnote(?![{])\", \"\\\\\\\\fnote\\\\1\", lines, perl = TRUE)\n  # Treat double quotes as singles (for checking whether footnote ends in full stop.)\n  lines <- gsub(\"''\", \"'\", lines, perl = TRUE)\n  \n  # More than one footnote on a line won't be good.\n  if (any(grepl(\"\\\\\\\\foot(?:(?:note)|(?:cite)).*\\\\\\\\foot(?:(?:note)|(?:cite))\", \n                lines,\n                perl = TRUE))){\n    lines <- read_lines(filename)\n    line_no <- grep(\"\\\\\\\\foot(?:(?:note)|(?:cite)).*\\\\\\\\foot(?:(?:note)|(?:cite))\", lines, perl = TRUE)[1]\n    .report_error(line_no = line_no, \n                  context = lines[[line_no]], \n                  error_message = \"\\\\footnote/\\\\footcite cannot occur twice on the same line in the source. Break this sentence up into multiple lines.\")\n    stop(\"\\\\footnote/\\\\footcite cannot occur twice on the same line in the source.\")\n  }\n\n  combined_lines <- combine_lines(lines)\n\n  lines_by_footnote <-\n    combined_lines %>%\n    grep(\"\\\\footnote\", ., fixed = TRUE, value = TRUE) %>%\n    strsplit(split = \"(?=([^\\\\s]footnote))\", perl = TRUE) %>%\n    unlist\n\n  lines_with_footnote <- grep(\"footnote\", lines_by_footnote, fixed = TRUE, value = TRUE)\n\n  # Check full stops\n  for (line in lines_with_footnote){\n    footnote_closes_at <- position_of_closing_brace(line = line, prefix = \"footnote\")\n    if (is.infinite(footnote_closes_at))\n      break\n    split_line_after_footnote <- strsplit(gsub(\"^.*footnote\", \"\", line, perl = TRUE), split = \"\")[[1]]\n    if (AND(length(split_line_after_footnote) > footnote_closes_at,\n            split_line_after_footnote[footnote_closes_at + 1] %in% c(\".\", \",\", \";\", \"?\", \":\", \"'\", '\"'))){\n      .report_error(context = paste0(\"\\\\footnote\\n         \",\n                                     paste0(split_line_after_footnote[1:(footnote_closes_at + 1)], \n                                            collapse = \"\")), \n                    error_message = \"Punctuation after footnotemark.\")\n      stop(\"Punctuation after footnotemark.\")\n    }\n  }\n  \n  line_nos_with_footcite <- \n    grepl(\"\\\\\\\\footcite(?!s)\", lines, perl = TRUE)\n  \n  line_nos_with_footcites <-\n    grepl(\"\\\\footcites\", lines, fixed = TRUE)\n  \n  # Have to separate otherwise the replacement occurs on the wrong command name\n  if (any(line_nos_with_footcite)){\n    lines_with_footcite <- lines[line_nos_with_footcite] \n    \n    lines_with_footcite_noarg <- lines_with_footcite\n    lines_with_footcite_noarg <- replace_nth_LaTeX_argument(lines_with_footcite_noarg, \n                                                            command_name = \"footcite\",\n                                                            n = 1L,\n                                                            replacement = \"\")\n    \n    chars_after_footcite <- gsub(\"^.*\\\\\\\\footcite\\\\{\\\\}\\\\s*(.)?.*$\", \n                                \"\\\\1\", \n                                lines_with_footcite_noarg, \n                                perl = TRUE)\n    \n    if (any(chars_after_footcite %in% c(\".\", \",\", \":\", \";\", \"'\", '\"', \"?\", \"-\"))){\n      first_footcite_w_punct <- which(chars_after_footcite %in% c(\".\", \",\", \":\", \";\", \"'\", '\"', \"?\", \"-\"))[[1]]\n      line_no <- line_nos_with_footcite[first_footcite_w_punct]\n      .report_error(line_no = line_nos_with_footcite[first_footcite_w_punct],\n                    context = lines[line_no], \n                    error_message = \"Punctuation mark after footcite number \", first_footcite_w_punct, \".\")\n      stop(\"Punctuation mark after footcite number \", first_footcite_w_punct, \".\")\n    }\n  }\n  \n  if (any(line_nos_with_footcites)){\n    # We can't just gsub {[A-Za-z]} because we don't know how many braces are needed.\n    lines_with_footcites <- lines[line_nos_with_footcites] \n    \n    sup_braces_after_footcites <- \n      gsub(\"[^\\\\}]+\", \"\", gsub(\"^.*footcite\", \"\", lines_with_footcites)) %>%\n      nchar %>%\n      max\n    \n    lines_with_footcites_noarg <- lines_with_footcites\n    \n    for (n in seq_len(sup_braces_after_footcites)){\n      lines_with_footcites_noarg <-\n        replace_nth_LaTeX_argument(lines_with_footcites_noarg,\n                                   \"footcites\",\n                                   n = n,\n                                   replacement = \"\",\n                                   warn = FALSE)\n    }\n    \n    # Now that footcites are just {} (repeated), find the first char thereafter.\n    chars_after_footcites <- gsub(\"^.*\\\\\\\\footcites?(?:\\\\{\\\\})+\\\\s*(.)?.*$\", \"\\\\1\", lines_with_footcites_noarg, perl = TRUE)\n    \n    if (any(chars_after_footcites %in% c(\".\", \",\", \":\", \";\", \"'\", '\"', \"?\"))){\n      stop(\"Punctuation mark after \\\\footcites number \",\n           which(chars_after_footcites %in% c(\".\", \",\", \":\", \";\", \"'\", '\"', \"?\")[[1]]))\n    }\n  }\n  \n  for (line in lines_with_footnote){\n    footnote_closes_at <- position_of_closing_brace(line = line, prefix = \"footnote\")\n    if (is.infinite(footnote_closes_at))\n      break\n    split_line_after_footnote <- strsplit(gsub(\"^.*footnote\", \"\", line, perl = TRUE), split = \"\")[[1]]\n    if (length(split_line_after_footnote) > footnote_closes_at && split_line_after_footnote[footnote_closes_at + 1] %in% c(\".\", \",\")){\n      cat(paste0(split_line_after_footnote,\n                 collapse = \"\"),\n          \"\\n\")\n      stop(\"Full stop after footnotemark.\")\n    }\n  }\n  \n  \n  \n  # cat(\"\\u2014  No full stops after footnotemarks\", \"\\n\")\n  rm(line)\n\n  for (line in lines_with_footnote){\n    footnote_closes_at <- position_of_closing_brace(line = line, prefix = \"footnote\")\n    split_line_after_footnote <- strsplit(gsub(\"^.*footnote\", \"\", line, perl = TRUE), split = \"\")[[1]]\n\n    if (length(split_line_after_footnote[footnote_closes_at - 1] != \".\") == 0){\n      .report_error(error_message = \"Couldn't determine where footnotes closed.\",\n                    context = paste0(split_line_after_footnote,\n                                     \"\\n\",\n                                     collapse = \"\"),\n                    advice = \"Examine this line for multiple paragraphs or unclosed footnotes.\")\n      stop(\"Argument length 0. You may want to consider ignoring this line.\")\n    }\n\n    if (split_line_after_footnote[footnote_closes_at - 1] %notin% c(\".\", \"?\")){\n      # OK if full stop is before parenthesis or quotes.\n      if (not(OR(AND(split_line_after_footnote[footnote_closes_at - 1] %in% c(\")\", \"'\"),\n                     split_line_after_footnote[footnote_closes_at - 2] %in% c(\".\", \"?\", \"'\")),\n                 AND(split_line_after_footnote[footnote_closes_at - 1] == \"}\",\n                     split_line_after_footnote[footnote_closes_at - 2] %in% c(\".\", \"?\", \"'\"))))){\n        .report_error(context = paste0(\"\\n\\\\footnote\\n         \",\n                                       paste0(split_line_after_footnote[1:footnote_closes_at],\n                                              collapse = \"\"),\n                                       \"\\n\"), \n                      error_message = \"Footnote does not end with full stop.\")\n        stop(\"Footnote does not end with full stop.\")\n      }\n    }\n  }\n  # cat(\"\\u2014  All footnotes end with a full stop.\", \"\\n\")\n  \n  # Space before footnote\n  a1 <- grepl(\" \\\\footnote\", lines, fixed = TRUE)\n  \n  # Nothing but spaces before footnote is ok ...\n  b1 <- grepl(\"^\\\\s*\\\\\\\\footnote\", lines, perl = TRUE)\n  # ... provided there is a protective % on the line before {lines[-1]}\n  # and there isn't a space before that. {(?<! )}\n  b2 <- shift(grepl(\"(?<! )%$\", lines, perl = TRUE), type = \"lag\", fill = FALSE)\n  \n  # a1 b1 b2  Test  Expect  Description\n  #  T  T  T  1     PASS    Tabbed footnote on own line: b2 protects\n  #  T  T  F  2     FAIL    Tabbed footnote without protection.\n  #  T  F  T  3     FAIL    Ordinary space (and txt) before fn % irrelevant -- protective space has no effect\n  #  T  F  F  4     FAIL    Ordinary space (and txt) before fn: lazy dog \\footnote\n  #  F  T  T  5     PASS    Non-tabbed footnote \\footnote at start of text: b2 protects\n  #  F  T  F  6     FAIL    Non-tabbed footnote without protection\n  #  F  F  T  7     PASS    No footnote\n  #  F  F  F  8     PASS    No footnote\n  \n  if (any(or(a1 & !(b1 & b2), \n             b1 & !b2))){\n    line_no <- which(or(a1 & !(b1 & b2), \n                        b1 & !b2))[[1]]\n    context <- \n      lines[line_no] \n    .report_error(line_no = line_no,\n                  context = context,\n                  error_message = \"Space inserted before \\\\footnote\")\n    stop(\"Space inserted before footnote.\")\n  }\n  \n  if (any(grepl(\"\\\\footnote{ \", lines, fixed = TRUE))){\n    line_no <- grep(\"\\\\footnote{ \", lines, fixed = TRUE)[[1]]\n    context <- lines[[line_no]]\n    .report_error(line_no = line_no,\n                  context = context,\n                  error_message = \"Leading spacing in footnotetext.\")\n    stop(\"Leading spacing in footnotetext.\")\n  }\n  \n  # cat(\"\\u2014  No space before footnote marks\", \"\\n\")\n  invisible(NULL)\n}\n\n\n",
    "created" : 1490327118723.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4066901427",
    "id" : "FC07DB71",
    "lastKnownWriteTime" : 1490327095,
    "last_content_update" : 1490327095,
    "path" : "~/grattanReporter/R/check_footnote_typography.R",
    "project_path" : "R/check_footnote_typography.R",
    "properties" : {
    },
    "relative_order" : 25,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}