{
    "collab_server" : "",
    "contents" : "#' Check Grattan Report\n#' @description Check Grattan reports written is LaTeX for typing errors, significant warnings, \n#' and inconsistent style.\n#' @param path Path to search for the tex source file.\n#' @param output_method How errors should be reported.\n#' @param compile Should \\code{pdflatex} be run on the report so the logs may be checked?\n#' @param pre_release Should the document be assumed to be final? Runs additional checks.\n#' @param release Should a final pdf be prepared for publication?\n#' @param .proceed_after_rerun On the occasions where infinitely many passes of \\code{pdflatex} \n#' are required, include this to skip the error. Note that this will result in false cross-references \n#' or incompletely formatted bibliographies.\n#' @param .no_log Make no entry in the log file on the check's outcome.\n#' @param embed If \\code{FALSE}, not attempt to embed the fonts using Ghostscript is attempted. Useful if Ghostscript cannot easily be installed.\n#' Set to \\code{TRUE} for debugging or repetitive use (as in benchmarking). \n#' @param update_grattan.cls Download \\code{grattan.cls} from \\url{https://github.com/HughParsonage/grattex/blob/master/grattan.cls}? \n#' Set to \\code{FALSE} when checking the \\code{grattex} repo itself.\n#' @return Called for its side-effect.\n#' @export\n#' @importFrom magrittr %>%\n#' @importFrom magrittr and\n#' @importFrom magrittr or\n#' @importFrom magrittr not\n#' @importFrom dplyr if_else\n#' @importFrom dplyr lead\n#' @importFrom dplyr lag\n#' @importFrom clisymbols symbol\n#' @importFrom crayon green red bgGreen bgRed bold\n#' @importFrom grDevices embedFonts\n#' @importFrom utils download.file\n#' @importFrom stats complete.cases\n#' @importFrom readr read_lines\n\ncheckGrattanReport <- function(path = \".\",\n                               output_method = c(\"console\", \"twitter\", \"gmailr\"),\n                               compile = FALSE,\n                               pre_release = FALSE,\n                               release = FALSE,\n                               .proceed_after_rerun,\n                               .no_log = TRUE, \n                               embed = TRUE, \n                               update_grattan.cls = TRUE){\n  if (release && (!pre_release || !compile)){\n    stop(\"release = TRUE but pre_release and compile are not both TRUE also.\")\n  }\n  \n  if (pre_release && !compile){\n    stop(\"pre_release = TRUE but compile = FALSE.\")\n  }\n  \n  if (compile && Sys.which(\"pdflatex\") == \"\"){\n    stop(\"pdflatex not on system path. Ensure you have LaTeX installed (MiKTeX, MacTeX, TeXLive) and that it is searchable on PATH. \",\n         \"(Did you install but leave programs open?)\")\n  }\n  \n  if (embed && release && Sys.getenv(\"R_GSCMD\") == \"\"){\n    stop(\"Ghostscript is required but R_GSCMD is not set. Ensure Ghostscript is installed then set R_GSCMD, e.g.\\n\\t\",\n         \"Sys.setenv(R_GSCMD = 'C:/Program Files/gs/gs9.20/bin/gswin64c.exe')\")\n  }\n  \n  current_wd <- getwd()\n  setwd(path)\n  on.exit(setwd(current_wd))\n  \n  output_method <- match.arg(output_method)\n  \n  if (pre_release && update_grattan.cls && !identical(tolower(Sys.getenv(\"TRAVIS_REPO_SLUG\")), \"hughparsonage/grattex\")){\n    download_failure <- download.file(\"https://raw.githubusercontent.com/HughParsonage/grattex/master/grattan.cls\",\n                                      destfile = \"grattan.cls\",\n                                      quiet = TRUE)\n    if (download_failure){\n      stop(\"grattan.cls failed to download from master branch (and be updated).\")\n    }\n  }\n  \n  if (!dir.exists(\"./travis/grattanReport/\")){\n    stop(\"./travis/grattanReport/ does not exist. Create this directory and try again.\")\n  }\n  \n  if (release){\n    if (!dir.exists(\"RELEASE\")){\n      dir.create(\"RELEASE\")\n    } else {\n      if (length(list.files(path = \"./RELEASE\", pattern = \"\\\\.pdf$\")) > 0){\n        # If there are any files in the RELEASE directory, move them (file.rename)\n        # to a subdirectory named by their creation time.\n        invisible({\n          lapply(list.files(path = \"./RELEASE\", pattern = \"\\\\.pdf$\", full.names = TRUE), \n                 function(file){\n                   date_created <- format(file.info(file)$ctime, format = \"%Y-%m-%d-%H%M\")\n                   if (!dir.exists(file.path(\"RELEASE\", date_created))){\n                     dir.create(file.path(\"RELEASE\", date_created))\n                   }\n                   file.rename(file, file.path(\"RELEASE\", date_created, basename(file)))\n                 })\n        })\n        message(\"RELEASE contained pdf files. These have been moved.\")\n      }\n    }\n  }\n  \n  if (pre_release){\n    if (!dir.exists(\"PRE-RELEASE\")){\n      dir.create(\"PRE-RELEASE\")\n    } else {\n      if (length(list.files(path = \"./PRE-RELEASE\", pattern = \"\\\\.pdf$\")) > 0){\n        invisible(lapply(list.files(path = \"./PRE-RELEASE\", pattern = \"\\\\.pdf$\", full.names = TRUE), file.remove))\n        message(\"PRE-RELEASE contained pdf files. These have been deleted.\")\n      }\n    }\n  }\n\n  tex_file <- dir(path = \".\", pattern = \"\\\\.tex$\")\n  if (length(tex_file) != 1L){\n    stop(\"path must contain one and only one .tex file.\")\n  }\n  filename <- tex_file[[1]]\n  \n  .report_error <- function(...){\n    report2console(...)\n  }\n  \n  report_name <- gsub(\"^(.*)\\\\.tex$\", \"\\\\1\", tex_file)\n  \n  switch(output_method, \n         \"twitter\" = {\n           stopifnot(file.exists(\"~/twitteR/grattan-reporter.R\"))\n           source(\"~/twitteR/grattan-reporter.R\")\n           twitter_handle <- name <- NULL\n           authors_twitter_handles <-\n             Grattan_staff %>%\n             .[and(name %in% the_authors,\n                   nchar(twitter_handle) > 0)] %>%\n             .[[\"twitter_handle\"]] %>%\n             paste0(\"@\", .)\n           \n           .report_error <- function(...){\n             report2twitter(...,\n                            authors = authors_twitter_handles,\n                            build_status = \"Broken:\",\n                            report_name = report_name)\n           }\n         }, \n         \"gmailr\" = {\n           .report_error <- function(...){\n             report2gmail(...,\n                          report_name = report_name, \n                          authors = the_authors)\n           }\n         })\n  \n  # Actual checking begins here\n  notes <- 0L\n  \n  \n  check_preamble(filename, .report_error, pre_release = pre_release, release = release)\n\n  the_authors <-\n    get_authors(filename)\n  \n  if (length(the_authors) == 0L){\n    stop(\"No authors detectable in document.\")\n  }\n\n  cat(\"I see the following as authors:\",\n      the_authors, sep = \"\\n   \")\n  \n  cat(\"\\n\")\n  \n  cat(green(symbol$tick, \"Preamble OK.\\n\"), sep = \"\")\n  \n  check_input <- function(filename){\n    inputs <- inputs_of(filename)\n    if (length(inputs) > 0){\n      for (input in inputs){\n        check_input(input)\n        cat(input)\n      \n        check_cite_pagerefs(input, .report_error = .report_error)\n        cat(\".\")\n        check_escapes(input, .report_error = .report_error)\n        cat(\".\")\n        check_dashes(input, .report_error = .report_error)\n        cat(\".\")\n        check_spacing(input, .report_error = .report_error)\n        cat(\".\")\n        check_quote_marks(input, .report_error = .report_error)\n        cat(\".\")\n        check_footnote_typography(input, .report_error = .report_error)\n        cat(\".\")\n        check_labels(input)\n        cat(\".\")\n        check_literal_xrefs(input, .report_error = .report_error)\n        cat(\".\")\n        check_xrefs(input, .report_error = .report_error)\n        cat(\".\")\n        check_sentence_ending_periods(input, .report_error = .report_error)\n        cat(\".\")\n        cat(\" OK\\n\")\n      }\n    }\n  }\n  check_input(filename)\n  \n  check_cite_pagerefs(filename, .report_error = .report_error)\n  cat(green(symbol$tick, \"Cite and pagerefs checked.\\n\"), sep = \"\")\n\n  check_escapes(filename)\n  cat(green(symbol$tick, \"No unescaped $.\\n\"))\n  \n  check_dashes(filename)\n  cat(green(symbol$tick, \"Dashes correctly typed.\\n\"))\n  \n  check_spacing(filename, .report_error = .report_error)\n  cat(green(symbol$tick, \"No spacing issues around abbreviations.\\n\"))\n  \n  check_quote_marks(filename, .report_error = .report_error)\n  cat(green(symbol$tick, \"Opening quotes correctly typed.\\n\"))\n\n  check_footnote_typography(filename)\n  cat(green(symbol$tick, \"Footnote typography checked.\\n\"))\n  \n  check_literal_xrefs(filename, .report_error = .report_error)\n  check_xrefs(filename)\n  cat(green(symbol$tick, \"No repetitive xrefs.\\n\"))\n\n  check_sentence_ending_periods(filename, .report_error = .report_error)\n  cat(green(symbol$tick, \"Sentence-ending periods ok.\\n\"))\n  \n  # To check the bibliography\n  bib_files <-\n    read_lines(filename) %>%\n    .[grepl(\"\\\\addbibresource\", ., fixed = TRUE)] %>%\n    trimws %>%\n    gsub(\"^\\\\\\\\addbibresource[{](.+\\\\.bib)[}]$\", \"\\\\1\", .)\n  \n  for (bib_file in bib_files){\n    validate_bibliography(file = bib_file)\n    cat(green(symbol$tick, bib_file, \"validated.\\n\"))\n  }\n  \n  any_bib_duplicates(bib.files = bib_files)\n  cat(green(symbol$tick, \"No obvious duplicates in bibliography.\\n\"))\n\n  check_spelling(filename, \n                 .report_error = .report_error,\n                 pre_release = pre_release,\n                 bib_files = bib_files)\n  if (!pre_release && exists(\"authors_in_bib_and_doc\") && not_length0(authors_in_bib_and_doc)){\n    notes <- notes + 1L\n    \n    authors_in_bib_and_doc <- \n      authors_in_bib_and_doc[seq.int(1L, min(length(authors_in_bib_and_doc), 5L))]\n    \n    cat(\"NOTE: Skipped spell check for authors in bibliography.\",\n        \"Please use \\\\citeauthor{} (preferred) or include the line\\n\\n\\t% add_to_dictionary:\", paste0(authors_in_bib_and_doc, collapse = \" \"), \n        \"\\n\\nin your .tex file if the names have been spelled correctly. (Author names will NOT be skipped at pre-release.)\\n\")\n  }\n  cat(green(symbol$tick, \"Spellcheck complete.\\n\"))\n\n  check_labels(filename)\n\n  cat(green(symbol$tick, \"Labels checked.\\n\"))\n\n  all_figs_tbls_refd <- figs_tbls_not_refd <- NULL\n  check_all_figs_tbls_refd(filename, compile = compile, pre_release = pre_release)\n\n  if (pre_release){\n    cat(green(symbol$tick, \"All figures and tables have a Xref.\\n\"))\n  } else {\n    if (is.null(all_figs_tbls_refd)){\n      stop(\"Emergency stop: This is a bug. Please report.\")\n    }\n    \n    if (!all_figs_tbls_refd){\n      notes <- notes + 1L\n      cat(if (compile) \"WARNING:\" else  \"NOTE:\", \n          \"Not all figures and tables referenced. \", \n          figs_tbls_not_refd)\n    }\n  }\n\n  cat(\"\\n\")\n  \n  if (compile){\n    full_dir_of_path <- getwd()\n    md5_filename <- paste0(substr(tools::md5sum(filename), 0, 10),\n                           substr(tools::md5sum(bib_file), 0, 10))\n    temp_dir <- file.path(tempdir(), md5_filename)\n    md5_iter <- 1\n    while (dir.exists(temp_dir)){\n      md5_filename <- gsub(\"^(.)(.+)$\", \"\\\\2\\\\1\", md5_filename)\n      temp_dir <- file.path(tempdir(), md5_filename)\n      md5_iter <- md5_iter + 1\n      if (md5_iter > 30){\n        cat(tempdir())\n        stop(\"Emergency stop: temporary directory full.\")\n      }\n    }\n    dir.create(temp_dir)\n    move_to(temp_dir)\n    if (file.exists(gsub(\"\\\\.tex\", \".pdf\", filename))){\n      file.remove(gsub(\"\\\\.tex\", \".pdf\", filename))\n    }\n    \n    cat(\"   Invoking pdflatex... \")\n    options(warn = 2)\n    system2(command = \"pdflatex\",\n            args = c(\"-draftmode\", filename),\n            stdout = gsub(\"\\\\.tex$\", \".log2\", filename))\n    cat(\"complete.\\n\")\n    cat(\"   Invoking biber...\\n\")\n    system2(command = \"biber\",\n            args = c(\"--onlylog\", \"-V\", gsub(\"\\\\.tex$\", \"\", filename)),\n            stdout = gsub(\"\\\\.tex$\", \".log2\", filename))\n    \n    check_biber()\n    cat(green(symbol$tick, \"biber validated citations.\\n\"))\n    \n    cat(\"   Rerunning pdflatex. Starting pass number 1\")\n    system2(command = \"pdflatex\",\n            args = c(\"-draftmode\", filename),\n            stdout = gsub(\"\\\\.tex$\", \".log2\", filename))\n    \n    cat(\" 2 \")\n    system2(command = \"pdflatex\",\n            args = c(\"-interaction=batchmode\", filename),\n            stdout = gsub(\"\\\\.tex$\", \".log2\", filename))\n    \n    log_result <- check_log(check_for_rerun_only = TRUE)\n    reruns_required <- 2\n    while (pre_release && !is.null(log_result) && log_result == \"Rerun LaTeX.\"){\n      cat(reruns_required + 1, \" \", sep = \"\")\n      system2(command = \"pdflatex\",\n              args = c(\"-interaction=batchmode\", filename),\n              stdout = gsub(\"\\\\.tex$\", \".log2\", filename))\n      log_result <- check_log(check_for_rerun_only = TRUE)\n      \n      reruns_required <- reruns_required + 1\n      if (!missing(.proceed_after_rerun) && reruns_required > .proceed_after_rerun){\n        cat(\"\\nW: Skipping checking of LaTeX rerun.\")\n        break\n      }\n      \n      if (missing(.proceed_after_rerun) && reruns_required > 9){\n          stop(\"Emergency stop: pdflatex had to rerun more than 9 times but could not stabilize cross-references or the bibliography. \",\n               \"Consult an expert: Hugh Parsonage or Cameron Chisholm or https://tex.stackexchange.com.\")\n      }\n    }\n    cat(\"\\n\")\n    cat(green(symbol$tick, \".log file checked.\\n\"))\n    \n    if (pre_release){\n      CenturyFootnote_suspect <- NULL\n      check_CenturyFootnote()\n      if (!CenturyFootnote_suspect){\n        cat(green(symbol$tick, \"\\\\CenturyFootnote correctly placed.\\n\"))\n      } else {\n        notes <- notes + 1\n      }\n      \n      if (release){\n        cat(\"Now preparing a release...\\n\")\n        if (!dir.exists(\"RELEASE\")){\n          dir.create(\"RELEASE\")\n        }\n        \n        new_filename <- \n          read_lines(filename) %>%\n          grep(\"^\\\\\\\\title\\\\{\", ., perl = TRUE, value = TRUE) %>% \n          gsub(\"^\\\\\\\\title\\\\{(.+)\\\\}$\", \"\\\\1\", ., perl = TRUE) %>%\n          gsub(\"[^A-Za-z]\", \"-\", ., perl = TRUE) %>%\n          paste0(\".pdf\")\n        \n        # Sys.setenv(R_GSCMD = \"C:/Program Files/gs/gs9.20/bin/gswin64c.exe\")\n        if (embed){\n          embedFonts(gsub(\"\\\\.tex$\", \".pdf\", filename),\n                     outfile = file.path(full_dir_of_path, \"RELEASE\", new_filename))\n          cat(green(symbol$tick, \"Fonts embedded.\\n\"))\n        } else {\n          file.copy(gsub(\"\\\\.tex$\", \".pdf\", filename), \n                    file.path(full_dir_of_path, \"RELEASE\", new_filename))\n          cat(\"NOTE: Fonts not embedded, as requested.\\n\")\n          notes <- notes + 1\n        }\n        \n      } else {\n        file.copy(paste0(report_name, \".pdf\"), \n                  file.path(full_dir_of_path,\n                            \"PRE-RELEASE\",\n                            paste0(report_name, \".pdf\")))\n      }\n      \n      setwd(full_dir_of_path)\n      cat(\"\\n\")\n    }\n  }\n  \n  cat(bgGreen(symbol$tick, \"Report checked.\\n\"))\n  if (pre_release){\n    if (release){\n      cat(\"Releaseable pdf written to \", file.path(path, \"RELEASE\", new_filename))\n      cat(\"\\nDONE.\")\n      \n      lines <- read_lines(filename)\n      if (!any(grepl(\"FrontPage\", lines))){\n        cat(\"\\n\\nNOTE: Did you forget to add the FrontPage to \\\\documentclass{grattan}?\")\n      }\n      if (any(grepl(\"XX\", lines[!or(grepl(\"tabularx\", lines, perl = TRUE),\n                                    grepl(\"^%\", lines, perl = TRUE))]))){\n        cat(\"\\nWARNING: Found XX in document.\")\n      }\n    } else {\n      cat(\"Pre-release version written to \", file.path(path, \"PRE-RELEASE\", gsub(\"\\\\.tex$\", \".pdf\", filename)))\n      cat(\"\\nDONE.\")\n    }\n  }\n  \n  if (file.exists(\"./travis/grattanReport/error-log.tsv\")){\n    prev_build_status <-\n      fread(\"./travis/grattanReport/error-log.tsv\") %>%\n      last %>%\n      .[[\"build_status\"]]\n    append <- TRUE\n  } else {\n    prev_build_status <- \"None\"\n    append <- FALSE\n  }\n  \n  if (prev_build_status %in% c(\"None\", \"Broken\", \"Still failing\")){\n    build_status <- \"Fixed\"\n    if (output_method == \"gmailr\"){\n      message <- gmailr::mime(\n        To = \"hugh.parsonage@gmail.com\", #email_addresses, \n        From = \"hugh.parsonage@gmail.com\",\n        Subject = paste0(\"Fixed: \", report_name)\n      ) %>%\n        gmailr::html_body(body = paste0(c(\"grattanReporter returned no error.\")))\n      gmailr::send_message(message)\n    }\n  } else {\n    build_status <- \"OK\"\n  }\n  \n  if (!.no_log){\n    data.table(Time = format(Sys.time(), \"%Y-%m-%d %H:%M:%S\"),\n               build_status = build_status, \n               error_message = \"NA\") %>%\n      fwrite(\"./travis/grattanReport/error-log.tsv\",\n             sep = \"\\t\",\n             append = append)\n    if (notes > 0){\n      if (notes > 1){\n        cat(\"\\n\\tThere were\", notes, \"notes.\")\n      } else {\n        cat(\"\\n\\tThere was 1 note.\")\n      }\n    } \n  }\n  \ninvisible(NULL)\n}\n",
    "created" : 1493167801960.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3829683849",
    "id" : "88577A45",
    "lastKnownWriteTime" : 1493167813,
    "last_content_update" : 1493167813476,
    "path" : "~/grattanReporter/R/checkGrattanReport.R",
    "project_path" : "R/checkGrattanReport.R",
    "properties" : {
    },
    "relative_order" : 26,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}